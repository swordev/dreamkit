---
import { Code, LinkButton } from "@astrojs/starlight/components";
export type Props = {
  title: string | false;
  code: string;
  fileName?: string;
  id: string;
  playground?: boolean;
  pkgDependencies?: Record<string, string>;
  pkgDevDependencies?: Record<string, string>;
};

const { props } = Astro;
---

{props.title !== false && <h3 id={props.id}>{props.title}</h3>}

<Code lang="ts" code={props.code} title={props.fileName} />

{
  (props.playground ?? true) && (
    <div
      style="text-align: right"
      data-project-title={props.title || ""}
      data-project-code={props.code}
      data-project-file-name={props.fileName}
      data-project-pkg-dependencies={JSON.stringify(props.pkgDependencies)}
      data-project-pkg-dev-dependencies={JSON.stringify(
        props.pkgDevDependencies
      )}
    >
      <LinkButton
        title="Download"
        href="#"
        class="project"
        style="margin-block:0; font-size: 15px"
        data-action="download"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          enable-background="new 0 0 24 24"
          fill="currentColor"
          height="24"
          viewBox="0 0 24 24"
          width="24"
        >
          <>
            <g>
              <rect fill="none" height="24" width="24" />
            </g>
            <g>
              <path d="M5,20h14v-2H5V20z M19,9h-4V3H9v6H5l7,7L19,9z" />
            </g>
          </>
        </svg>
      </LinkButton>
      <LinkButton
        title="Play code"
        href="#"
        class="project"
        style="margin-block:0; font-size: 15px"
        data-action="open"
      >
        <svg
          fill="currentColor"
          width="1.5em"
          height="1.5em"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
        >
          <>
            <path d="M0 0h24v24H0z" fill="none" />
            <path d="M8 5v14l11-7z" />
          </>
        </svg>
      </LinkButton>
    </div>
  )
}

<script>
  import openProject, { buildProjectFiles } from "../utils/stackblitz.ts";
  import { downloadZip } from "client-zip";
  document.addEventListener("click", async (e) => {
    const element =
      e.target instanceof Element
        ? (e.target.closest("[data-project-code]") as HTMLElement)
        : undefined;
    const targetElement =
      e.target instanceof HTMLElement
        ? e.target.matches("[data-action]")
          ? e.target
          : undefined
        : e.target instanceof Element
          ? (e.target.closest("[data-action]") as HTMLElement)
          : undefined;
    if (element && targetElement) {
      e.preventDefault();
      const action = targetElement.dataset.action;
      location.href;
      const section = location.href.split("/").pop();
      const fileName = [
        section,
        element.dataset.projectTitle?.toLowerCase().replaceAll(" ", "-"),
        "example",
      ]
        .filter(Boolean)
        .join("-");
      const pkgDependencies = element.dataset.projectPkgDependencies
        ? JSON.parse(element.dataset.projectPkgDependencies)
        : {};
      const pkgDevDependencies = element.dataset.projectPkgDevDependencies
        ? JSON.parse(element.dataset.projectPkgDevDependencies)
        : {};
      if (action === "open") {
        openProject({
          pkgDependencies,
          pkgDevDependencies,
          appFile: element.dataset.projectFileName,
          appCode: element.dataset.projectCode ?? "",
        });
      } else if (action === "download") {
        const files = Object.entries(
          buildProjectFiles({
            pkgDependencies,
            pkgDevDependencies,
            appFile: element.dataset.projectFileName,
            appCode: element.dataset.projectCode ?? "",
          })
        ).map(([name, content]) => new File([content], name));

        const blob = await downloadZip(files).blob();

        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = `${fileName}.zip`;
        link.click();
        link.remove();
      }
    }
  });
</script>
