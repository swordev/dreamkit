---
import { Card, CardGrid } from "@astrojs/starlight/components";
import StarlightPage from "@astrojs/starlight/components/StarlightPage.astro";
---

<StarlightPage
  frontmatter={{
    title: "dreamkit",
    description: "A toolkit for building Solid/SolidStart apps.",
    template: "splash",
    hero: {
      tagline: "The Solid.js dev kit you've always dreamed of.",
      actions: [
        {
          text: "Get started",
          link: "/get-started",
          icon: "right-arrow",
        },
        {
          text: "Playground",
          link: "#playground",
          icon: "external",
          variant: "minimal",
        },
      ],
    },
  }}
>
  <CardGrid stagger>
    <Card title="Filosofy" icon="rocket">
      Typesafe. Single source of truth. Frictionless.
    </Card>
    <Card title="Compatibility" icon="random">
      Compatible with SolidStart and Solid.js (WIP).
    </Card>
  </CardGrid>

  <h2>Routing</h2>

  <CardGrid>
    <Card title="Type safe and validation" icon="seti:typescript">
      Define your routes and params and enjoy of the a validation and type safe
      routing automatically.
    </Card>
    <Card title="Route params" icon="setting">
      Path and search params as single one. Simplify the logic joining both
      params in a single concept and using it where you wants.
    </Card>
    <Card title="Route JSON params" icon="seti:json">
      Use any JSON value in your params and don't worry about serialization.
    </Card>
    <Card title="Ready-to-use typed utilities" icon="seti:typescript">
      Use the routing path safely throughout the application.
    </Card>
  </CardGrid>

  <h2>Controlled components</h2>

  <CardGrid>
    <Card title="Signals" icon="seti:pipeline">
      Use real controlled input components with your Solid.js sigals.
    </Card>
    <Card title="Type safe" icon="seti:typescript">
      Safe typing based on input type.
    </Card>
  </CardGrid>

  <h2>IoC</h2>

  <CardGrid>
    <Card title="Inversion of Control">
      Use the IoC container to manage your services and dependencies with total
      control.
    </Card>
    <Card title="Safe testing" icon="seti:typescript">
      Inject dependencies manually but with strong typing to check your code.
    </Card>
  </CardGrid>

  <h2>Schema</h2>

  <CardGrid>
    <Card title="Single source of truth">
      Define your schema and use it in everywhere (services, middlewares, api,
      routes).
    </Card>
    <Card title="Any shape" icon="seti:typescript">
      Shape your objects by making deep changes of any kind (pick, omit,
      partial, require, nullish, assign).
    </Card>
  </CardGrid>

  <h2>API</h2>

  <CardGrid>
    <Card title="Server and client united"
      >With the user experience that the API builder offers you, you will
      believe that client and server are just one.</Card
    >
    <Card title="Type safe with validation" icon="seti:typescript">
      Input validation on both the client (before request) and the server with
      type safe.
    </Card>
  </CardGrid>

  <h2>Backend</h2>

  <CardGrid>
    <Card title="Service"
      >Control the complete lifecycle of your application.</Card
    >
    <Card title="Middlewares">Handle requests with secure typing.</Card>
  </CardGrid>
</StarlightPage>
<script is:inline>
  if (location.hostname.startsWith("next.")) {
    document.querySelector("#next-version-banner")?.remove();
  }
</script>
<script>
  import openProject from "../utils/stackblitz.ts";
  import code from "./entry/_examples/home-route.tsx?raw";

  const playgroundLink = document.querySelector('a[href="#playground"]')!;
  playgroundLink.addEventListener("click", (e) => {
    e.preventDefault();
    openProject({ appCode: code });
  });
</script>

<style is:global>
  .hero {
    grid-template-columns: 1fr !important;
    justify-items: center !important;
  }
</style>
