---
import definition from "./_definition?raw";
import ApiPage from "../../../components/ApiPage.astro";
---

<ApiPage
  name="Schema"
  imports={["s"]}
  description="Schema type builder."
  definition={definition}
  examples={[
    await import("./_examples/validate.tsx?raw"),
    await import("./_examples/object.tsx?raw"),
  ]}
>
  <p>
    One of the main goals of this library is to bring the data schema from the
    database to the user's form itself. The goal is ambitious but feasible.
  </p>
  <p>
    Because most of the data tends to come from a limited schema (SQL/NoSQL),
    @dreamkit/schema does not aspire to be able to build very complex schemas,
    since these complex schemas, in addition to not existing in a database, are
    not easy to represent with secure typing in a form.
  </p>
  <p>
    On the other hand, you may be tired of the number of libraries of this kind
    (e.g. zod, yup, valibot), but below I will explain some of the reasons for
    this decision.
  </p>
  <p>
    In the initial stages of development, valibot was considered, but its user
    experience is diminished by its aggressive tree shaking system, and if there
    is one thing that DreamKit aims to stand out for, it is its UX.
  </p>
  <p>
    Zod was another alternative, but its large size and performance deficiencies
    in TypeScript were important reasons for its discard.
  </p></ApiPage
>
